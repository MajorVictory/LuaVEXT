{
	"scope" : "source.lua - string",
	"completions":
	[
		// Constants
		"_G",
		"_VERSION",
		{ "trigger": "package_loaded", "contents": "package.loaded" },
		{ "trigger": "package_loaders", "contents": "package.loaders" },
		{ "trigger": "package_preload", "contents": "package.preload" },
		{ "trigger": "math_pi", "contents": "math.pi" },
		{ "trigger": "math_huge", "contents": "math.huge" },
		{ "trigger": "math_maxinteger", "contents": "math.maxinteger" },
		{ "trigger": "math_mininteger", "contents": "math.mininteger" },
		{ "trigger": "utf8_charpattern", "contents": "utf8.charpattern" },

		// No-arg functions
		{ "trigger": "coroutine_running()", "contents": "coroutine.running()" },
		{ "trigger": "os_clock()", "contents": "os.clock()" },
		{ "trigger": "os_tmpname()", "contents": "os.tmpname()" },

		// The rest
		{ "trigger": "assert( v, message )", "contents": "assert( ${1:v}, ${2:message} )" },
		{ "trigger": "collectgarbage( opt, arg )", "contents": "collectgarbage( ${1:opt}, ${2:arg} )" },
		{ "trigger": "error( message, level )", "contents": "error( ${1:message}, ${2:level} )" },
		{ "trigger": "getfenv( f )", "contents": "getfenv( ${1:f} )" },
		{ "trigger": "getmetatable( object )", "contents": "getmetatable( ${1:object} )" },
		{ "trigger": "ipairs( t )", "contents": "ipairs( ${1:t} )" },
		{ "trigger": "load( func, chunkname )", "contents": "load( ${1:func}, ${2:chunkname} )" },
		{ "trigger": "loadstring( string, chunkname )", "contents": "loadstring( ${1:string}, ${2:chunkname} )" },
		{ "trigger": "next( table, index )", "contents": "next( ${1:table}, ${2:index} )" },
		{ "trigger": "pairs( t )", "contents": "pairs( ${1:t} )" },
		{ "trigger": "pcall( f, arg1, ... )", "contents": "pcall( ${1:f}, ${2:arg1}, ${3:...} )" },
		{ "trigger": "print( ... )", "contents": "print( ${1:...} )" },
		{ "trigger": "rawequal( v1, v2 )", "contents": "rawequal( ${1:v1}, ${2:v2} )" },
		{ "trigger": "rawget( table, index )", "contents": "rawget( ${1:table}, ${2:index} )" },
		{ "trigger": "rawset( table, index, value )", "contents": "rawset( ${1:table}, ${2:index}, ${3:value} )" },
		{ "trigger": "select( index, ... )", "contents": "select( ${1:index}, ${2:...} )" },
		{ "trigger": "setfenv( f, table )", "contents": "setfenv( ${1:f}, ${2:table} )" },
		{ "trigger": "setmetatable( table, metatable )", "contents": "setmetatable( ${1:table}, ${2:metatable} )" },
		{ "trigger": "tonumber( e, base )", "contents": "tonumber( ${1:e}, ${2:base} )" },
		{ "trigger": "tostring( e )", "contents": "tostring( ${1:e} )" },
		{ "trigger": "type( v )", "contents": "type( ${1:v} )" },
		{ "trigger": "unpack( list, i, j )", "contents": "unpack( ${1:list}, ${2:i}, ${3:j} )" },
		{ "trigger": "xpcall( f, err )", "contents": "xpcall( ${1:f}, ${2:err} )" },
		{ "trigger": "coroutine_create( f )", "contents": "coroutine.create( ${1:f} )" },
		{ "trigger": "coroutine_resume( co, val1, ... )", "contents": "coroutine.resume( ${1:co}, ${2:val1}, ${3:...} )" },
		{ "trigger": "coroutine_status( co )", "contents": "coroutine.status( ${1:co} )" },
		{ "trigger": "coroutine_wrap( f )", "contents": "coroutine.wrap( ${1:f} )" },
		{ "trigger": "coroutine_yield( ... )", "contents": "coroutine.yield( ${1:...} )" },
		{ "trigger": "module( name, ... )", "contents": "module( ${1:name}, ${2:...} )" },
		{ "trigger": "require( modname )", "contents": "require( ${1:modname} )" },
		{ "trigger": "package_seeall( module )", "contents": "package.seeall( ${1:module} )" },
		{ "trigger": "json_encode( v )", "contents": "json.encode( ${1:v} )" },
		{ "trigger": "json_decode( s )", "contents": "json.decode( ${1:s} )" },
		{ "trigger": "string_byte( s, i, j )", "contents": "string.byte( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_char( ... )", "contents": "string.char( ${1:...} )" },
		{ "trigger": "string_ends( s, needle )", "contents": "string.ends( ${1:s}, ${2:needle} )" },
		{ "trigger": "string_dump( function )", "contents": "string.dump( ${1:func} )" },
		{ "trigger": "string_find( s, pattern, init, plain )", "contents": "string.find( ${1:s}, ${2:pattern}, ${3:init}, ${4:plain} )" },
		{ "trigger": "string_format( formatstring, ... )", "contents": "string.format( ${1:formatstring}, ${2:...} )" },
		{ "trigger": "string_gmatch( s, pattern )", "contents": "string.gmatch( ${1:s}, ${2:pattern} )" },
		{ "trigger": "string_gsub( s, pattern, repl, n )", "contents": "string.gsub( ${1:s}, ${2:pattern}, ${3:repl}, ${4:n} )" },
		{ "trigger": "string_len( s )", "contents": "string.len( ${1:s} )" },
		{ "trigger": "string_lower( s )", "contents": "string.lower( ${1:s} )" },
		{ "trigger": "string_match( s, pattern, init )", "contents": "string.match( ${1:s}, ${2:pattern}, ${3:init} )" },
		{ "trigger": "string_rep( s, n )", "contents": "string.rep( ${1:s}, ${2:n} )" },
		{ "trigger": "string_reverse( s )", "contents": "string.reverse( ${1:s} )" },
		{ "trigger": "string_sub( s, i, j )", "contents": "string.sub( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_starts( s, needle )", "contents": "string.starts( ${1:s}, ${2:needle} )" },
		{ "trigger": "string_upper( s )", "contents": "string.upper( ${1:s} )" },
		{ "trigger": "table_concat( table, sep, i, j )", "contents": "table.concat( ${1:table}, ${2:sep}, ${3:i}, ${4:j} )" },
		{ "trigger": "table_insert( table, pos, value )", "contents": "table.insert( ${1:table}, ${2:pos}, ${3:value} )" },
		{ "trigger": "table_maxn( table )", "contents": "table.maxn( ${1:table} )" },
		{ "trigger": "table_remove( table, pos )", "contents": "table.remove( ${1:table}, ${2:pos} )" },
		{ "trigger": "table_sort( table, comp )", "contents": "table.sort( ${1:table}, ${2:comp} )" },
		{ "trigger": "math_abs( x )", "contents": "math.abs( ${1:x} )" },
		{ "trigger": "math_acos( x )", "contents": "math.acos( ${1:x} )" },
		{ "trigger": "math_asin( x )", "contents": "math.asin( ${1:x} )" },
		{ "trigger": "math_atan( x )", "contents": "math.atan( ${1:x} )" },
		{ "trigger": "math_ceil( x )", "contents": "math.ceil( ${1:x} )" },
		{ "trigger": "math_cos( x )", "contents": "math.cos( ${1:x} )" },
		{ "trigger": "math_deg( x )", "contents": "math.deg( ${1:x} )" },
		{ "trigger": "math_exp( x )", "contents": "math.exp( ${1:x} )" },
		{ "trigger": "math_floor( x )", "contents": "math.floor( ${1:x} )" },
		{ "trigger": "math_fmod( x, y )", "contents": "math.fmod( ${1:x}, ${2:y} )" },
		{ "trigger": "math_log( x )", "contents": "math.log( ${1:x} )" },
		{ "trigger": "math_max( x, ... )", "contents": "math.max( ${1:x}, ${2:...} )" },
		{ "trigger": "math_min( x, ... )", "contents": "math.min( ${1:x}, ${2:...} )" },
		{ "trigger": "math_modf( x )", "contents": "math.modf( ${1:x} )" },
		{ "trigger": "math_pow( x, y )", "contents": "math.pow( ${1:x}, ${2:y} )" },
		{ "trigger": "math_rad( x )", "contents": "math.rad( ${1:x} )" },
		{ "trigger": "math_random( m, n )", "contents": "math.random( ${1:m}, ${2:n} )" },
		{ "trigger": "math_randomseed( x )", "contents": "math.randomseed( ${1:x} )" },
		{ "trigger": "math_sin( x )", "contents": "math.sin( ${1:x} )" },
		{ "trigger": "math_sqrt( x )", "contents": "math.sqrt( ${1:x} )" },
		{ "trigger": "math_tan( x )", "contents": "math.tan( ${1:x} )" },
		{ "trigger": "os_date( format, time )", "contents": "os.date( ${1:format}, ${2:time} )" },
		{ "trigger": "os_difftime( t2, t1 )", "contents": "os.difftime( ${1:t2}, ${2:t1} )" },
		{ "trigger": "os_time( table )", "contents": "os.time( ${1:table} )" },
		{ "trigger": "utf8_char( ... )", "contents": "utf8.char( ${1:...} )" },
		{ "trigger": "utf8_codes( s, lax )", "contents": "utf8.codes( ${1:s}, ${2:lax} )" },
		{ "trigger": "utf8_codepoint( s, i, j, lax )", "contents": "utf8.codepoint( ${1:s}, ${2:i}, ${3:j}, ${4:lax} )" },
		{ "trigger": "utf8_len( s, i, j, lax )", "contents": "utf8.len( ${1:s}, ${2:i}, ${3:j}, ${4:lax} )" },
		{ "trigger": "utf8_offset( s, n, i )", "contents": "utf8.offset( ${1:s}, ${2:n}, ${3:i} )" },
	]
}
